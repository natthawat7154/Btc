import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging
import threading
import json
import os
import calendar
import sys
import math

# ==============================================================================
# 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (CONFIGURATION)
# ==============================================================================

# --- API Keys & Credentials (‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Environment Variables ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢) ---
API_KEY = os.getenv('BINANCE_API_KEY', 'YOUR_BINANCE_API_KEY_HERE_FOR_LOCAL_TESTING')
SECRET = os.getenv('BINANCE_SECRET', 'YOUR_BINANCE_SECRET_HERE_FOR_LOCAL_TESTING')

# --- Trade Parameters ---
SYMBOL = 'BTC/USDT:USDT' # ‡πÉ‡∏ä‡πâ 'BTC/USDT:USDT' ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Exchange ‡∏Ñ‡∏∑‡∏ô‡∏°‡∏≤‡πÉ‡∏ô get_current_position()
TIMEFRAME = '1h'
LEVERAGE = 30
TP_DISTANCE_POINTS = 1111 #‚ù§Ô∏è‚Äçü©π‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
SL_DISTANCE_POINTS = 1234

# --- Trailing Stop Loss Parameters (3 Steps) ---
# üìà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Long Position: (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
TRAIL_SL_STEP1_TRIGGER_LONG_POINTS = 300
TRAIL_SL_STEP1_NEW_SL_POINTS_LONG = -700

TRAIL_SL_STEP2_TRIGGER_LONG_POINTS = 500
TRAIL_SL_STEP2_NEW_SL_POINTS_LONG = 460
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå SL Step 3 (TP ‡∏à‡∏≥‡∏•‡∏≠‡∏á) ‡πÉ‡∏´‡∏°‡πà:
TRAIL_SL_STEP3_TRIGGER_LONG_POINTS = 700  # + points ‡∏à‡∏≤‡∏Å entry
TRAIL_SL_STEP3_NEW_SL_POINTS_LONG = 650   # ‡∏ï‡∏±‡πâ‡∏á SL ‡∏ó‡∏µ‡πà + points (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô TP)

# üìâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short Position: (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏¥‡πà‡∏á‡∏•‡∏á)
TRAIL_SL_STEP1_TRIGGER_SHORT_POINTS = 300
TRAIL_SL_STEP1_NEW_SL_POINTS_SHORT = 700

TRAIL_SL_STEP2_TRIGGER_SHORT_POINTS = 500
TRAIL_SL_STEP2_NEW_SL_POINTS_SHORT = -460

TRAIL_SL_STEP3_TRIGGER_SHORT_POINTS = 700 # - points ‡∏à‡∏≤‡∏Å entry  
TRAIL_SL_STEP3_NEW_SL_POINTS_SHORT = -650 # ‡∏ï‡∏±‡πâ‡∏á SL ‡∏ó‡∏µ‡πà - points (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô TP)

#‚è≥‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Manual TP
MANUAL_TP_ALERT_THRESHOLD = 1000  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏ô...‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠
MANUAL_TP_ALERT_INTERVAL = 600   # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å..‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

CROSS_THRESHOLD_POINTS = 1 #‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Ç‡∏≠‡∏áema
# --- EMA Parameters ---
EMA_FAST_PERIOD = 9 #üìâ
EMA_SLOW_PERIOD = 50 #üìà

# --- Risk Management ---
MARGIN_BUFFER_USDT = 5
TARGET_POSITION_SIZE_FACTOR = 0.8 # ‡πÉ‡∏ä‡πâ 0.8 (80%) ‡∏Ç‡∏≠‡∏á Equity ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

# --- Order Confirmation & Stability ---
CONFIRMATION_RETRIES = 15
CONFIRMATION_SLEEP = 5
TP_SL_BE_PRICE_TOLERANCE_PERCENT = 0.005

# --- Telegram Notification Settings ---
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING')

# --- Files & Paths ---
STATS_FILE = 'trading_stats.json'

# --- Bot Timing (‡πÅ‡∏¢‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏ß‡∏•‡∏≤) ---
FAST_LOOP_INTERVAL_SECONDS = 3 # ‚è∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå, TP/SL (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
EMA_CALC_INTERVAL_SECONDS = 180 # ‚è∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ Cross Signal (‡∏ä‡πâ‡∏≤‡∏•‡∏á)
TRADE_COOLDOWN_SECONDS = 180 # ‚è∞‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ Cooldown
ERROR_RETRY_SLEEP_SECONDS = 60
MONTHLY_REPORT_DAY = 20 #‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
MONTHLY_REPORT_HOUR = 0 #‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢ ‡∏ä.‡∏°. ‚úñÔ∏è‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
MONTHLY_REPORT_MINUTE = 5

# ==============================================================================
# 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
# ==============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
for handler in logging.root.handlers:
    if isinstance(handler, logging.StreamHandler):
        handler.flush = lambda: sys.stdout.flush()

logger = logging.getLogger(__name__)


# ==============================================================================
# 3. ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (GLOBAL TRADE STATE VARIABLES)
# ==============================================================================
current_position_details = None
portfolio_balance = 0.0
last_monthly_report_date = None
initial_balance = 0.0
last_ema_position_status = None
last_ema_calc_time = datetime.min
last_trade_closed_time = datetime.min # *** ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î **
waiting_for_cooldown = False  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
last_manual_tp_alert_time = datetime.min  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
# ‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ cross ‡πÉ‡∏´‡∏°‡πà
must_wait_new_cross = False
last_cross_bar_time = None
last_entry_cross_bar_time = None

# ==============================================================================
# 4. ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS DATA STRUCTURE)
# ==============================================================================
monthly_stats = {
    'month_year': None,
    'tp_count': 0,
    'sl_count': 0,
    'total_pnl': 0.0,
    'trades': [],
    'last_report_month_year': None,
    'last_ema_cross_signal': None,
    'last_ema_position_status': None
}

# ==============================================================================
# 5. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Exchange (CCXT EXCHANGE SETUP)
# ==============================================================================
exchange = None
market_info = None

def setup_exchange():
    global exchange, market_info
    try:
        if not API_KEY or API_KEY == 'YOUR_BINANCE_API_KEY_HERE_FOR_LOCAL_TESTING' or \
           not SECRET or SECRET == 'YOUR_BINANCE_SECRET_HERE_FOR_LOCAL_TESTING':
            raise ValueError("API_KEY ‡∏´‡∏£‡∏∑‡∏≠ SECRET ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variables. ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç.")

        exchange = ccxt.binance({
            'apiKey': API_KEY,
            'secret': SECRET,
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'defaultType': 'future',
                'marginMode': 'cross',
            },
            'verbose': False,
            'timeout': 30000,
        })

        exchange.load_markets()
        logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Binance Futures Exchange ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î Markets ‡πÅ‡∏•‡πâ‡∏ß.")

        market_info = exchange.market(SYMBOL)
        if not market_info:
            raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå {SYMBOL}")

        if 'limits' not in market_info: market_info['limits'] = {}
        if 'amount' not in market_info['limits']: market_info['limits']['amount'] = {}
        if 'cost' not in market_info['limits']: market_info['limits']['cost'] = {}

        amount_step_val = market_info['limits']['amount'].get('step')
        amount_min_val = market_info['limits']['amount'].get('min')
        amount_max_val = market_info['limits']['amount'].get('max')
        cost_min_val = market_info['limits']['cost'].get('min')
        cost_max_val = market_info['limits']['cost'].get('max')

        market_info['limits']['amount']['step'] = float(amount_step_val) if amount_step_val is not None else 0.001
        market_info['limits']['amount']['min'] = float(amount_min_val) if amount_min_val is not None else 0.001
        market_info['limits']['amount']['max'] = float(amount_max_val) if amount_max_val is not None else sys.float_info.max
        market_info['limits']['cost']['min'] = float(cost_min_val) if cost_min_val is not None else 5.0
        market_info['limits']['cost']['max'] = float(cost_max_val) if cost_max_val is not None else sys.float_info.max

        logger.info(f"üí° Market info limits for {SYMBOL}: Amount step={market_info['limits']['amount']['step']}, min={market_info['limits']['amount']['min']}; Cost min={market_info['limits']['cost']['min']}")

        try:
            result = exchange.set_leverage(LEVERAGE, SYMBOL)
            logger.info(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage ‡πÄ‡∏õ‡πá‡∏ô {LEVERAGE}x ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {SYMBOL}: {result}")
        except ccxt.ExchangeError as e:
            if "leverage is not valid" in str(e) or "not valid for this symbol" in str(e):
                logger.critical(f"‚ùå Error: Leverage {LEVERAGE}x ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {SYMBOL} ‡∏ö‡∏ô Binance. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Max Allowed Leverage.")
            else:
                logger.critical(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage: {e}", exc_info=True)
            send_telegram(f"‚õîÔ∏è Critical Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Leverage ‡πÑ‡∏î‡πâ.\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            exit()

    except ValueError as ve:
        logger.critical(f"‚ùå Configuration Error: {ve}", exc_info=True)
        send_telegram(f"‚õîÔ∏è Critical Error: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î.\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {ve}")
        exit()
    except Exception as e:
        logger.critical(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Exchange ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ: {e}", exc_info=True)
        send_telegram(f"‚õîÔ∏è Critical Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Exchange ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        exit()

# ==============================================================================
# 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ (STATISTICS MANAGEMENT FUNCTIONS)
# ==============================================================================

def save_monthly_stats():
    global monthly_stats, last_ema_position_status
    try:
        monthly_stats['last_ema_position_status'] = last_ema_position_status
        with open(os.path.join(os.getcwd(), STATS_FILE), 'w', encoding='utf-8') as f:
            json.dump(monthly_stats, f, indent=4)
        logger.debug(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {STATS_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}")

def reset_monthly_stats():
    global monthly_stats, last_ema_position_status
    monthly_stats['month_year'] = datetime.now().strftime('%Y-%m')
    monthly_stats['tp_count'] = 0
    monthly_stats['sl_count'] = 0
    monthly_stats['total_pnl'] = 0.0
    monthly_stats['trades'] = []
    save_monthly_stats()
    logger.info(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {monthly_stats['month_year']}")

def load_monthly_stats():
    global monthly_stats, last_monthly_report_date, last_ema_position_status
    stats_file_path = os.path.join(os.getcwd(), STATS_FILE)
    try:
        if os.path.exists(stats_file_path):
            with open(stats_file_path, 'r', encoding='utf-8') as f:
                loaded_stats = json.load(f)

            monthly_stats['month_year'] = loaded_stats.get('month_year', None)
            monthly_stats['tp_count'] = loaded_stats.get('tp_count', 0)
            monthly_stats['sl_count'] = loaded_stats.get('sl_count', 0)
            monthly_stats['total_pnl'] = loaded_stats.get('total_pnl', 0.0)
            monthly_stats['trades'] = loaded_stats.get('trades', [])
            monthly_stats['last_report_month_year'] = loaded_stats.get('last_report_month_year', None)
            monthly_stats['last_ema_cross_signal'] = loaded_stats.get('last_ema_cross_signal', None)
            last_ema_position_status = loaded_stats.get('last_ema_position_status', None)

            logger.info(f"üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå {STATS_FILE} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            if monthly_stats['last_report_month_year']:
                try:
                    year, month = map(int, monthly_stats['last_report_month_year'].split('-'))
                    last_monthly_report_date = datetime(year, month, 1).date()
                except ValueError:
                    logger.warning("‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà last_report_report_month_year ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. ‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô.")
                    last_monthly_report_date = None
            else:
                last_monthly_report_date = None

            current_month_year_str = datetime.now().strftime('%Y-%m')
            if monthly_stats['month_year'] != current_month_year_str:
                logger.info(f"‚ÑπÔ∏è ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {monthly_stats['month_year']} ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ {current_month_year_str}. ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà.")
                reset_monthly_stats()

        else:
            logger.info(f"üÜï ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ {STATS_FILE} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà")
            reset_monthly_stats()

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {e}", exc_info=True)
        if not os.access(os.path.dirname(stats_file_path) or '.', os.W_OK):
            logger.critical(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ: {os.path.dirname(stats_file_path) or '.'}. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô STATS_FILE.")

        monthly_stats = {
            'month_year': None, 'tp_count': 0, 'sl_count': 0, 'total_pnl': 0.0, 'trades': [],
            'last_report_month_year': None, 'last_ema_cross_signal': None, 'last_ema_position_status': None
        }
        last_monthly_report_date = None
        last_ema_position_status = None
        reset_monthly_stats()

def add_trade_result(reason: str, pnl: float):
    global monthly_stats
    current_month_year_str = datetime.now().strftime('%Y-%m')

    if monthly_stats['month_year'] != current_month_year_str:
        logger.info(f"üÜï ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏ô add_trade_result: {monthly_stats['month_year']} -> {current_month_year_str}. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô.")
        reset_monthly_stats()

    if reason.upper() == 'TP':
        monthly_stats['tp_count'] += 1
    elif reason.upper() == 'SL' or reason.upper() == 'SL (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)':
        monthly_stats['sl_count'] += 1

    monthly_stats['total_pnl'] += pnl

    monthly_stats['trades'].append({
        'time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'reason': reason,
        'pnl': pnl
    })
    save_monthly_stats()

# ==============================================================================
# 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram (TELEGRAM NOTIFICATION FUNCTIONS)
# ==============================================================================
def send_telegram(msg: str):
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == 'YOUR_TELEGRAM_TOKEN_HERE_FOR_LOCAL_TESTING' or \
       not TELEGRAM_CHAT_ID or TELEGRAM_CHAT_ID == 'YOUR_CHAT_ID_HERE_FOR_LOCAL_TESTING':
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ TELEGRAM_CHAT_ID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ.")
        return

    try:
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': msg, 'parse_mode': 'HTML'}
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        logger.info(f"‚úâÔ∏è Telegram: {msg.splitlines()[0]}...")
    except requests.exceptions.Timeout:
        logger.error("‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ (Timeout)")
    except requests.exceptions.HTTPError as e:
        telegram_error_msg = e.response.json().get('description', e.response.text)
        logger.error(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ (HTTP Error) - ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {telegram_error_msg}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ (Request Error) - {e}")
    except Exception as e:
        logger.error(f"‚ùå Unexpected Telegram error: {e}")

# ==============================================================================
# 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Exchange (EXCHANGE DATA RETRIEVAL FUNCTIONS)
# ==============================================================================

def get_portfolio_balance() -> float:
    global portfolio_balance
    retries = 3
    for i in range(retries):
        try:
            logger.debug(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (Attempt {i+1}/{retries})...")
            balance = exchange.fetch_balance()
            time.sleep(0.5)

            free_usdt = balance.get('USDT', {}).get('free', 0)
            if free_usdt == 0:
                for asset_info in balance.get('info', {}).get('assets', []):
                    if asset_info.get('asset') == 'USDT':
                        free_usdt = float(asset_info.get('availableBalance', 0))
                        break

            portfolio_balance = float(free_usdt)
            logger.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ USDT: {portfolio_balance:,.2f}")
            return portfolio_balance

        except (ccxt.NetworkError, ccxt.ExchangeError) as e:
            logger.warning(f"‚ö†Ô∏è Error fetching balance (Attempt {i+1}/{retries}): {e}. Retrying in 15 seconds...")
            if i == retries - 1:
                send_telegram(f"‚õîÔ∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ (Attempt {i+1}/{retries})\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            time.sleep(15)
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in get_portfolio_balance: {e}", exc_info=True)
            send_telegram(f"‚õîÔ∏è Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            return 0.0
    logger.error(f"‚ùå Failed to fetch balance after {retries} attempts.")
    send_telegram(f"‚õîÔ∏è API Error: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
    return 0.0

def get_current_position() -> dict | None:
    retries = 5
    for i in range(retries):
        try:
            logger.info(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Exchange (Attempt {i+1}/{retries})...")
            time.sleep(1)
            positions = exchange.fetch_positions([SYMBOL])
            logger.info(f"INFO: Raw positions fetched from Exchange (Attempt {i+1}): {positions}")
            time.sleep(0.5)

            for pos in positions:
                if 'symbol' in pos and 'contracts' in pos:
                    pos_amount = float(pos.get('contracts', 0) or pos.get('positionAmt', 0))
                    pos_side = pos.get('side') # 'long' or 'short'
                    
                    entry_price_val = float(pos.get('entryPrice', 0))
                    unrealized_pnl_val = float(pos.get('unrealizedPnl', 0))
                    liquidation_price_val = float(pos.get('liquidationPrice', 0)) if pos.get('liquidationPrice') else None

                    if pos['symbol'] == SYMBOL and pos_amount != 0 and pos_side:
                        logger.info(f"‚úÖ ‡∏û‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {pos['symbol']}: Side={pos_side}, Contracts={abs(pos_amount):,.8f}, Entry={entry_price_val:,.2f}")
                        return {
                            'symbol': pos['symbol'],
                            'side': pos_side,
                            'contracts': abs(pos_amount),
                            'entry_price': entry_price_val,
                            'unrealized_pnl': unrealized_pnl_val,
                            'liquidation_price': liquidation_price_val,
                            'info': pos
                        }
                else:
                    logger.debug(f"DEBUG: Skipping position entry due to missing 'symbol' or 'contracts': {pos}")

            logger.info(f"‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Exchange ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SYMBOL ‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö {len(positions)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£.")
            return None
        except (ccxt.NetworkError, ccxt.ExchangeError) as e:
            logger.warning(f"‚ö†Ô∏è Error fetching positions (Attempt {i+1}/{retries}): {e}. Retrying in 15 seconds...")
            if i == retries - 1:
                send_telegram(f"‚õîÔ∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ (Attempt {i+1}/{retries})\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            time.sleep(15)
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in get_current_position: {e}", exc_info=True)
            send_telegram(f"‚õîÔ∏è Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
            return None
    logger.error(f"‚ùå Failed to fetch positions after {retries} attempts.")
    send_telegram(f"‚õîÔ∏è API Error: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
    return None

# ==============================================================================
# 9. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Indicators (INDICATOR CALCULATION FUNCTIONS)
# ==============================================================================

def calculate_ema(prices: list[float], period: int) -> float | None:
    if len(prices) < period:
        return None

    sma = sum(prices[:period]) / period
    ema = sma
    multiplier = 2 / (period + 1)

    for price in prices[period:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))

    return ema

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô check_ema_cross() ‡πÉ‡∏´‡∏°‡πà
def check_ema_cross() -> str | None:
    global last_ema_position_status
    global last_cross_bar_time
    
    try:
        retries = 3
        ohlcv = None
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° EMA periods
        min_required_candles = max(EMA_FAST_PERIOD, EMA_SLOW_PERIOD) + 50
        required_limit = max(EMA_FAST_PERIOD, EMA_SLOW_PERIOD) * 4 # ‡πÉ‡∏ä‡πâ 4 ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        
        for i in range(retries):
            logger.debug(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA{EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD} ({i+1}/{retries})...")
            try:
                ohlcv = exchange.fetch_ohlcv(SYMBOL, TIMEFRAME, limit=required_limit)
                time.sleep(0.2) # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ sleep
                break
            except (ccxt.NetworkError, ccxt.ExchangeError) as e:
                logger.warning(f"‚ö†Ô∏è Error fetching OHLCV (Attempt {i+1}/{retries}): {e}. Retrying in 10 seconds...")
                if i == retries - 1:
                    send_telegram(f"‚ö†Ô∏è API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á OHLCV ‡πÑ‡∏î‡πâ (Attempt {i+1}/{retries})\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
                time.sleep(10) # ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ sleep
            except Exception as e:
                logger.error(f"‚ùå Unexpected error fetching OHLCV: {e}", exc_info=True)
                send_telegram(f"‚ùå Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á OHLCV ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
                return None
        
        if not ohlcv or len(ohlcv) < min_required_candles:
            logger.warning(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠. ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {min_required_candles} ‡πÅ‡∏ó‡πà‡∏á ‡πÑ‡∏î‡πâ{len(ohlcv)}")
            send_telegram(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLCV ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ({len(ohlcv)} ‡πÅ‡∏ó‡πà‡∏á) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA{EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD}")
            return None
        
        closes = [candle[4] for candle in ohlcv]
        prev_bar_time_ms = ohlcv[-2][0]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        ema_fast_current = calculate_ema(closes, EMA_FAST_PERIOD)
        ema_slow_current = calculate_ema(closes, EMA_SLOW_PERIOD)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ 1 ‡πÅ‡∏ó‡πà‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô)
        ema_fast_previous = calculate_ema(closes[:-1], EMA_FAST_PERIOD)
        ema_slow_previous = calculate_ema(closes[:-1], EMA_SLOW_PERIOD)
        
        logger.info(f"üìä EMA Values: Current EMA{EMA_FAST_PERIOD}={ema_fast_current:,.2f}, EMA{EMA_SLOW_PERIOD}={ema_slow_current:,.2f}")
        logger.info(f"üìä EMA Previous: EMA{EMA_FAST_PERIOD}={ema_fast_previous:,.2f}, EMA{EMA_SLOW_PERIOD}={ema_slow_previous:,.2f}")
        
        if None in [ema_fast_current, ema_slow_current, ema_fast_previous, ema_slow_previous]:
            logger.warning("‚ùå ‡∏Ñ‡πà‡∏≤ EMA ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ (‡πÄ‡∏õ‡πá‡∏ô None).")
            return None
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        current_ema_position = 'above' if ema_fast_current > ema_slow_current else 'below'
        previous_ema_position = 'above' if ema_fast_previous > ema_slow_previous else 'below'
        
        # === ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ reset ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ===
        if last_ema_position_status is None:
            last_ema_position_status = current_ema_position
            save_monthly_stats()
            logger.info(f"üîÑ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô/‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA{EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {current_ema_position.upper()}. ‡∏à‡∏∞‡∏£‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ.")
            return None
        
        # === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á EMA ===
        cross_signal = None
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Golden Cross (EMA Fast ‡∏ï‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ç‡πâ‡∏≤‡∏° EMA Slow)
        if (previous_ema_position == 'below' and current_ema_position == 'above' and 
            ema_fast_current > (ema_slow_current + CROSS_THRESHOLD_POINTS)):
            cross_signal = 'long'
            last_cross_bar_time = prev_bar_time_ms
            logger.info(f"üü¢ Golden Cross Detected: EMA{EMA_FAST_PERIOD} ({ema_fast_current:,.2f}) ‡∏ï‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ç‡πâ‡∏≤‡∏° EMA{EMA_SLOW_PERIOD} ({ema_slow_current:,.2f}) + {CROSS_THRESHOLD_POINTS} points threshold")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Death Cross (EMA Fast ‡∏ï‡∏±‡∏î‡∏•‡∏á‡∏Ç‡πâ‡∏≤‡∏° EMA Slow)
        elif (previous_ema_position == 'above' and current_ema_position == 'below' and 
              ema_fast_current < (ema_slow_current - CROSS_THRESHOLD_POINTS)):
            cross_signal = 'short'
            last_cross_bar_time = prev_bar_time_ms
            logger.info(f"üî¥ Death Cross Detected: EMA{EMA_FAST_PERIOD} ({ema_fast_current:,.2f}) ‡∏ï‡∏±‡∏î‡∏•‡∏á‡∏Ç‡πâ‡∏≤‡∏° EMA{EMA_SLOW_PERIOD} ({ema_slow_current:,.2f}) - {CROSS_THRESHOLD_POINTS} points threshold")
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if current_ema_position != last_ema_position_status:
            logger.info(f"üîÑ EMA position changed from {last_ema_position_status.upper()} to {current_ema_position.upper()}")
            last_ema_position_status = current_ema_position
            save_monthly_stats()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
        if cross_signal is not None:
            logger.info(f"üéØ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA{EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD} Cross ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {cross_signal.upper()}")
            return cross_signal
        else:
            logger.info(f"‚è≥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA{EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD} Cross ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_ema_position.upper()}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA: {e}", exc_info=True)
        send_telegram(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return None
        
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ EMA ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
def update_ema_parameters(fast_period: int, slow_period: int):
    """
    ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ EMA periods ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    fast_period: ‡∏Ñ‡πà‡∏≤ EMA ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 10, 20, 50)
    slow_period: ‡∏Ñ‡πà‡∏≤ EMA ‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 50, 100, 200)
    """
    global EMA_FAST_PERIOD, EMA_SLOW_PERIOD, last_ema_position_status
    
    if fast_period >= slow_period:
        logger.error("Fast EMA period ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Slow EMA period")
        return False
    
    if fast_period < 1 or slow_period < 1:
        logger.error("EMA periods ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
        return False
    
    old_fast = EMA_FAST_PERIOD
    old_slow = EMA_SLOW_PERIOD
    
    EMA_FAST_PERIOD = fast_period
    EMA_SLOW_PERIOD = slow_period
    last_ema_position_status = None  # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ EMA
    
    logger.info(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ EMA ‡∏à‡∏≤‡∏Å {old_fast}/{old_slow} ‡πÄ‡∏õ‡πá‡∏ô {EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD}")
    send_telegram(f"üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ EMA ‡πÄ‡∏õ‡πá‡∏ô {EMA_FAST_PERIOD}/{EMA_SLOW_PERIOD}\n‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡πÅ‡∏•‡πâ‡∏ß")
    return True

# ==============================================================================
# 10. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
# ==============================================================================

def round_to_precision(value: float, precision_type: str) -> float:
    """‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° Precision ‡∏ó‡∏µ‡πà Exchange ‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    if market_info and 'precision' in market_info and precision_type in market_info['precision']:
        return float(exchange.decimal_to_precision(value, ccxt.ROUND, market_info['precision'][precision_type]))
    else:
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Precision ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{precision_type}'. ‡πÉ‡∏ä‡πâ round() ‡∏õ‡∏Å‡∏ï‡∏¥.")
        return round(value, 8)

def set_sl_only_for_position(direction: str, amount: float, sl_price: float) -> bool:
    """
    ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏Ñ‡πà Stop Loss ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á TP)
    ‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà
    """
    if not amount or amount <= 0:
        logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á SL ‡πÑ‡∏î‡πâ: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return False
    
    # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    cancel_all_open_tp_sl_orders()
    time.sleep(2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö market_info
    if not market_info or 'precision' not in market_info:
        logger.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• market_info ‡∏´‡∏£‡∏∑‡∏≠ precision. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á SL ‡πÑ‡∏î‡πâ")
        return False
    
    try:
        # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Exchange
        market_info_precision_price = 'price'
        sl_price_formatted = round_to_precision(sl_price, market_info_precision_price)
        
        logger.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á SL: {sl_price_formatted:,.2f} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {direction.upper()}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ SL
        current_price = exchange.fetch_ticker(SYMBOL)['last']
        
        if direction == 'long':
            if sl_price_formatted >= current_price:
                logger.error(f"‚ùå SL price ({sl_price_formatted}) ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({current_price}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Long")
                return False
        else:  # short
            if sl_price_formatted <= current_price:
                logger.error(f"‚ùå SL price ({sl_price_formatted}) ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({current_price}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short")
                return False
        
        sl_side = 'sell' if direction == 'long' else 'buy'
        
        # ‡∏ï‡∏±‡πâ‡∏á Stop Loss Order
        try:
            sl_order = exchange.create_order(
                symbol=SYMBOL,
                type='STOP_MARKET',
                side=sl_side,
                amount=amount,
                price=None,
                params={
                    'stopPrice': sl_price_formatted,
                    'reduceOnly': True,
                }
            )
            logger.info(f"üõë Stop Loss order placed: ID ‚Üí {sl_order.get('id', 'N/A')}, Price: {sl_price_formatted}")
            
        except Exception as sl_error:
            logger.error(f"Error setting Stop Loss: {str(sl_error)}")
            send_telegram(f"‚ùå SL Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á Stop Loss ‡πÑ‡∏î‡πâ\n{str(sl_error)}")
            return False
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        send_telegram(
            f"‚úÖ <b>‡∏ï‡∏±‡πâ‡∏á SL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\n"
            f"üìå <b>SL:</b> <code>{sl_price_formatted:,.2f}</code>\n"
            #f"üìä <b>Direction:</b> {direction.upper()}\n"
            #f"üìè <b>Size:</b> {amount:,.8f}"
        )
        
        return True
        
    except ccxt.BaseError as e:
        logger.error(f"Error setting SL: {str(e)}", exc_info=True)
        send_telegram(f"‚ùå API Error (SL): {e.args[0] if e.args else str(e)}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error setting SL: {e}", exc_info=True)
        send_telegram(f"‚ùå Unexpected Error (SL): {e}")
        return False

def calculate_order_details(available_usdt: float, price: float) -> tuple[float, float]:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞ Margin ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å Exchange Limits
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
    """
    if price <= 0 or LEVERAGE <= 0 or TARGET_POSITION_SIZE_FACTOR <= 0:
        logger.error("Error: Price, leverage, and target_position_size_factor must be positive.")
        return (0, 0)

    if not market_info:
        logger.error(f"‚ùå Could not retrieve market info for {SYMBOL}. Please ensure setup_exchange ran successfully.")
        return (0, 0)

    try:
        amount_step = market_info['limits']['amount']['step']
        min_exchange_amount = market_info['limits']['amount']['min']
        max_exchange_amount = market_info['limits']['amount']['max']
        min_notional_exchange = market_info['limits']['cost']['min']

    except KeyError as e:
        logger.critical(f"‚ùå Error accessing market limits for {SYMBOL}: Missing key {e}. Exiting.", exc_info=True)
        send_telegram(f"‚õîÔ∏è Critical Error: Cannot parse market limits for {SYMBOL}.\nDetails: {e}")
        return (0, 0)
    except (TypeError, ValueError) as e:
        logger.critical(f"‚ùå Error parsing market limits for {SYMBOL}: Invalid value {e}. Exiting.", exc_info=True)
        send_telegram(f"‚õîÔ∏è Critical Error: Cannot parse market limits for {SYMBOL}.\nDetails: {e}")
        return (0, 0)

    # *** ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (80%) ***
    investable_capital = available_usdt - MARGIN_BUFFER_USDT
    if investable_capital <= 0:
        logger.warning(f"‚ùå Available capital ({available_usdt:,.2f}) is not enough after deducting margin buffer ({MARGIN_BUFFER_USDT:,.2f}) for investment.")
        return (0, 0)

    target_notional_for_order_raw = investable_capital * TARGET_POSITION_SIZE_FACTOR * LEVERAGE

    min_notional_from_min_amount = min_exchange_amount * price
    target_notional_for_order = max(target_notional_for_order_raw, min_notional_exchange, min_notional_from_min_amount)

    if target_notional_for_order_raw < min_notional_exchange:
        logger.info(f"‚ÑπÔ∏è Calculated notional from percentage ({target_notional_for_order_raw:,.2f}) is below exchange minimum ({min_notional_exchange:,.2f}). Will attempt to open at exchange minimum ({target_notional_for_order:,.2f}).")

    # *** ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ***

    contracts_raw = target_notional_for_order / price
    contracts_to_open = float(exchange.amount_to_precision(SYMBOL, contracts_raw))

    contracts_to_open = max(contracts_to_open, min_exchange_amount)
    contracts_to_open = min(contracts_to_open, max_exchange_amount)

    actual_notional_after_precision = contracts_to_open * price
    required_margin = actual_notional_after_precision / LEVERAGE

    if contracts_to_open == 0:
        logger.warning(f"‚ö†Ô∏è Calculated contracts to open is 0 after all adjustments. (Target notional: {target_notional_for_order:,.2f} USDT, Current price: {price:,.2f}, Min exchange amount: {min_exchange_amount:.8f}). This means calculated size is too small or rounded to zero.")
        return (0, 0)

    if available_usdt < required_margin + MARGIN_BUFFER_USDT:
        logger.error(f"‚ùå Margin not sufficient. Available: {available_usdt:,.2f}, Required: {required_margin:,.2f} (for trade) + {MARGIN_BUFFER_USDT} (Buffer) = {required_margin + MARGIN_BUFFER_USDT:,.2f} USDT.")
        return (0, 0)

    logger.info(f"üí° Order Calculation Result: Contracts: {contracts_to_open:,.8f}, Target Notional: {target_notional_for_order:,.2f}, Actual Notional: {actual_notional_after_precision:,.2f}, Req Margin: {required_margin:,.2f} USDT")
    return (contracts_to_open, required_margin)


def confirm_position_entry(expected_direction: str, expected_contracts: float) -> tuple[bool, float | None]:
    """‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô"""
    global current_position_details

    if not market_info:
        logger.critical("‚ùå Critical Error: market_info is not loaded. Cannot confirm position.")
        send_telegram("‚õîÔ∏è Critical Error: Market info not loaded. Cannot confirm position.")
        return False, None

    try:
        step_size = market_info['limits']['amount']['step']
    except KeyError:
        logger.critical("‚ùå Critical Error: market_info['limits']['amount']['step'] is invalid. Cannot confirm position.")
        send_telegram("‚õîÔ∏è Critical Error: Market info step size invalid. Cannot confirm position.")
        return False, None

    size_tolerance = max(step_size * 2, expected_contracts * 0.001)

    logger.info(f"‚ÑπÔ∏è Initial 5-second sleep before starting position confirmation attempts for {expected_direction.upper()} {expected_contracts:,.8f} contracts.")
    time.sleep(5)

    for attempt in range(CONFIRMATION_RETRIES):
        logger.info(f"‚è≥ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô (Attempt {attempt + 1}/{CONFIRMATION_RETRIES})...")
        time.sleep(CONFIRMATION_SLEEP)

        try:
            position_info = get_current_position()
            logger.info(f"INFO: Position info retrieved for confirmation attempt {attempt+1}: {position_info}")

            if position_info and position_info.get('side') == expected_direction:
                actual_size = position_info.get('contracts', 0.0)
                confirmed_entry_price = position_info.get('entry_price') or position_info.get('entryPrice')

                if math.isclose(actual_size, expected_contracts, rel_tol=size_tolerance):
                    logger.info(f"‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {expected_direction.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")

                    if confirmed_entry_price is not None:
                        logger.info(f"   - Entry Price: {confirmed_entry_price:,.2f}")
                    else:
                        logger.warning("‚ö†Ô∏è Entry Price ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô None ‡πÉ‡∏ô confirm_position_entry()")

                    logger.info(f"   - Size: {actual_size:,.8f} Contracts")
                    logger.info(f"   - Direction: {expected_direction.upper()}")

                    current_position_details = {
                        'symbol': SYMBOL,
                        'side': expected_direction,
                        'contracts': actual_size,
                        'entry_price': confirmed_entry_price,
                        'unrealized_pnl': position_info.get('unrealizedPnl', 0.0),
                        'liquidation_price': position_info.get('liquidationPrice', None),
                        'sl_step': 0,  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà Step 0
                        'sl_price': None,  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô monitor_position
                        'tp_price': None,  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô monitor_position
                        'initial_sl_price': None  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á SL ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
                    }
                    logger.info(f"INFO: current_position_details set: {current_position_details}")

                    profit_loss = position_info.get('unrealizedPnl', 0)
                    send_telegram(
                        f"üéØ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {expected_direction.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n"
                        f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î: {actual_size:,.8f} Contracts\n"
                        f"üí∞ Entry: {confirmed_entry_price if confirmed_entry_price is not None else 'N/A'}\n"
                        f"üìà P&L: {profit_loss:,.2f} USDT"
                    )
                    return True, confirmed_entry_price
                else:
                    logger.warning(f"‚ö†Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_contracts:,.8f}, ‡πÑ‡∏î‡πâ: {actual_size:,.8f}). Tolerance: {size_tolerance:,.8f}. Retrying...")
            else:
                logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_direction.upper()}) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏¢. Retrying...")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô (Attempt {attempt+1}): {e}", exc_info=True)

    logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {CONFIRMATION_RETRIES} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    send_telegram(
        f"‚õîÔ∏è Position Confirmation Failed\n"
        f"üîç ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÉ‡∏ô Exchange ‡∏î‡πà‡∏ß‡∏ô!\n"
        f"üìä ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected_direction.upper()} {expected_contracts:,.8f} Contracts"
    )
    return False, None

# ==============================================================================
# 11. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
# ==============================================================================
def open_market_order(direction: str, current_price: float) -> tuple[bool, float | None]:
    global current_position_details, last_trade_closed_time, waiting_for_cooldown

    # *** ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î ***
    if last_trade_closed_time and last_trade_closed_time != datetime.min:
        seconds_since_close = (datetime.now() - last_trade_closed_time).total_seconds()
        if seconds_since_close < TRADE_COOLDOWN_SECONDS:
            time_left = TRADE_COOLDOWN_SECONDS - seconds_since_close
            logger.warning(f"üö´ COOLDOWN ACTIVE ‚Üí ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {time_left:.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            send_telegram(f"üö´ ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á cooldown ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô\n‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö {TRADE_COOLDOWN_SECONDS // 60} ‡∏ô‡∏≤‡∏ó‡∏µ")
            return False, None

    try:
        balance = get_portfolio_balance()
        if balance <= MARGIN_BUFFER_USDT:
            error_msg = f"‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ({balance:,.2f} USDT) ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Margin Buffer ({MARGIN_BUFFER_USDT} USDT)."
            send_telegram(f" Balance Error: {error_msg}")
            logger.error(f" {error_msg}")
            return False, None

        order_amount, estimated_used_margin = calculate_order_details(balance, current_price)
        if order_amount <= 0:
            error_msg = " Calculated order amount is zero or insufficient. Cannot open position."
            send_telegram(f" Order Calculation Error: {error_msg}")
            logger.error(f" {error_msg}")
            return False, None

        decimal_places = 0
        if market_info and 'limits' in market_info and 'amount' in market_info['limits'] and 'step' in market_info['limits']['amount'] and market_info['limits']['amount']['step'] is not None:
            step_size = market_info['limits']['amount']['step']
            if step_size < 1:
                decimal_places = int(round(-math.log10(step_size)))

        logger.info(f" Trading Summary before opening order:")
        logger.info(f" - Balance: {balance:,.2f} USDT")
        logger.info(f" - Contracts: {order_amount:,.{decimal_places}f}")
        logger.info(f" - Required Margin (incl. buffer): {estimated_used_margin + MARGIN_BUFFER_USDT:,.2f} USDT")
        logger.info(f" - Direction: {direction.upper()}")

        side = 'buy' if direction == 'long' else 'sell'
        params = {}
        order = None

        for attempt in range(3):
            logger.info(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Market Order (Attempt {attempt + 1}/3) - {order_amount:,.{decimal_places}f} Contracts, Direction: {direction.upper()}")
            try:
                order = exchange.create_market_order(
                    symbol=SYMBOL,
                    side=side,
                    amount=order_amount,
                    params=params
                )
                if order and order.get('id'):
                    logger.info(f" Market Order ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ID ‚Üí {order.get('id')}, Status: {order.get('status', 'N/A')}")
                    time.sleep(2)
                    break
                else:
                    logger.warning(f" Order response ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (Attempt {attempt + 1}/3)")
            except ccxt.NetworkError as e:
                logger.warning(f" Network Error (Attempt {attempt + 1}/3): {e}")
                if attempt == 2:
                    send_telegram(f" Network Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
                time.sleep(10)
            except ccxt.ExchangeError as e:
                logger.warning(f" Exchange Error (Attempt {attempt + 1}/3): {e}")
                if attempt == 2:
                    send_telegram(f" Exchange Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
                time.sleep(10)
            except Exception as e:
                logger.error(f" Unexpected error (Attempt {attempt + 1}/3): {e}", exc_info=True)
                send_telegram(f" Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
                return False, None

        if not order:
            logger.error("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            send_telegram(" Order Failed: ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            return False, None

        logger.info(f"INFO: Calling confirm_position_entry for direction: {direction}")
        return confirm_position_entry(direction, order_amount)

    except Exception as e:
        logger.error(f" Critical Error in open_market_order: {e}", exc_info=True)
        send_telegram(f" Critical Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n{str(e)[:200]}...")
        return False, None

# ========================================================================
# 12. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TP/SL/‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Trailing SL) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
# ========================================================================

def cancel_all_open_tp_sl_orders():
    """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TP/SL ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Symbol ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ö‡∏ô Binance Futures."""
    logger.info(f"üîÑ Checking for and canceling existing TP/SL orders for {SYMBOL}...")
    
    try:
        open_orders = exchange.fetch_open_orders(SYMBOL)
        canceled_count = 0
        
        for order in open_orders:
            if (order['status'] == 'open' or order['status'] == 'pending') and \
               (order.get('reduceOnly', False) == True or \
                order['type'] in ['TAKE_PROFIT_MARKET', 'STOP_MARKET', 'STOP_LOSS_LIMIT', 'TAKE_PROFIT_LIMIT']):
                try:
                    exchange.cancel_order(order['id'], SYMBOL)
                    logger.info(f"‚úÖ Canceled old TP/SL order: ID {order['id']}, Type: {order['type']}, Side: {order['side']}, Price: {order.get('stopPrice') or order.get('price')}")
                    canceled_count += 1
                    time.sleep(0.5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                except ccxt.OrderNotFound:
                    logger.info(f"‚ÑπÔ∏è Order {order['id']} not found or already canceled/filled. No action needed.")
                except ccxt.BaseError as e:
                    logger.warning(f"‚ö†Ô∏è Failed to cancel order {order['id']}: {str(e)}")
        
        if canceled_count == 0:
            logger.info("‚ÑπÔ∏è No old TP/SL orders found to cancel.")
        else:
            logger.info(f"‚úÖ Successfully canceled {canceled_count} old TP/SL orders.")
            
    except ccxt.NetworkError as e:
        logger.error(f"‚ùå Network error while fetching/canceling open orders: {e}")
        send_telegram(f"‚ùå API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ (Network)\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
    except ccxt.ExchangeError as e:
        logger.error(f"‚ùå Exchange error while fetching/canceling open orders: {e}")
        send_telegram(f"‚ùå API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ (Exchange)\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
    except Exception as e:
        logger.error(f"‚ùå An unexpected error occurred while canceling orders: {e}", exc_info=True)
        send_telegram(f"‚ùå Unexpected Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")

def set_tpsl_for_position(direction: str, amount: float, current_sl_price: float, current_tp_price: float) -> bool:
    """
    ‡∏ï‡∏±‡πâ‡∏á Take Profit ‡πÅ‡∏•‡∏∞ Stop Loss ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô.
    ‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà
    """
    if not amount or amount <= 0:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á TP/SL ‡πÑ‡∏î‡πâ: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á.")
        return False
    
    # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP/SL ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    cancel_all_open_tp_sl_orders()
    time.sleep(1)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö market_info
    if not market_info or 'precision' not in market_info:
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• market_info ‡∏´‡∏£‡∏∑‡∏≠ precision. ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á TP/SL ‡πÑ‡∏î‡πâ.")
        return False
    
    try:
        # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° Exchange
        market_info_precision_price = 'price'
        tp_price_formatted = round_to_precision(current_tp_price, market_info_precision_price)
        sl_price_formatted = round_to_precision(current_sl_price, market_info_precision_price)
        
        logger.info(f"üéØ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á TP: {tp_price_formatted:,.2f} | üõ°Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á SL: {sl_price_formatted:,.2f} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {direction.upper()}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ TP/SL
        current_price = exchange.fetch_ticker(SYMBOL)['last']
        
        if direction == 'long':
            if tp_price_formatted <= current_price:
                logger.error(f"‚ùå TP price ({tp_price_formatted}) ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({current_price}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Long")
                return False
            if sl_price_formatted >= current_price:
                logger.error(f"‚ùå SL price ({sl_price_formatted}) ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({current_price}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Long")
                return False
        else:  # short
            if tp_price_formatted >= current_price:
                logger.error(f"‚ùå TP price ({tp_price_formatted}) ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({current_price}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short")
                return False
            if sl_price_formatted <= current_price:
                logger.error(f"‚ùå SL price ({sl_price_formatted}) ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ({current_price}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short")
                return False
        
        tp_sl_side = 'sell' if direction == 'long' else 'buy'
        
        # ‡∏ï‡∏±‡πâ‡∏á Take Profit Order
        try:
            tp_order = exchange.create_order(
                symbol=SYMBOL,
                type='TAKE_PROFIT_MARKET',
                side=tp_sl_side,
                amount=amount,
                price=None,
                params={
                    'stopPrice': tp_price_formatted,
                    'reduceOnly': True,
                }
            )
            logger.info(f"‚úÖ Take Profit order placed: ID ‚Üí {tp_order.get('id', 'N/A')}, Price: {tp_price_formatted}")
            time.sleep(1)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á TP ‡πÅ‡∏•‡∏∞ SL
            
        except Exception as tp_error:
            logger.error(f"‚ùå Error setting Take Profit: {str(tp_error)}")
            send_telegram(f"‚ùå TP Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á Take Profit ‡πÑ‡∏î‡πâ\n{str(tp_error)}")
            return False
        
        # ‡∏ï‡∏±‡πâ‡∏á Stop Loss Order
        try:
            sl_order = exchange.create_order(
                symbol=SYMBOL,
                type='STOP_MARKET',
                side=tp_sl_side,
                amount=amount,
                price=None,
                params={
                    'stopPrice': sl_price_formatted,
                    'reduceOnly': True,
                }
            )
            logger.info(f"üõ°Ô∏è Stop Loss order placed: ID ‚Üí {sl_order.get('id', 'N/A')}, Price: {sl_price_formatted}")
            
        except Exception as sl_error:
            logger.error(f"‚ùå Error setting Stop Loss: {str(sl_error)}")
            send_telegram(f"‚ùå SL Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á Stop Loss ‡πÑ‡∏î‡πâ\n{str(sl_error)}")
            
            # ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á SL ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å TP ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢
            try:
                exchange.cancel_order(tp_order['id'], SYMBOL)
                logger.info("üîÑ Canceled TP order due to SL failure")
            except:
                pass
            return False
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        send_telegram(
            f"‚úÖ <b>‡∏ï‡∏±‡πâ‡∏á TP/SL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</b>\n"
            f"üéØ <b>TP:</b> <code>{tp_price_formatted:,.2f}</code>\n"
            f"üõ°Ô∏è <b>SL:</b> <code>{sl_price_formatted:,.2f}</code>\n"
            f"üìä <b>Direction:</b> {direction.upper()}\n"
            #f"üì¶ <b>Size:</b> {amount:,.8f}"
        )
        
        return True
        
    except ccxt.BaseError as e:
        logger.error(f"‚ùå Error setting TP/SL: {str(e)}", exc_info=True)
        send_telegram(f"‚ùå API Error (TP/SL): {e.args[0] if e.args else str(e)}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Unexpected error setting TP/SL: {e}", exc_info=True)
        send_telegram(f"‚ùå Unexpected Error (TP/SL): {e}")
        return False

# ========================================================================
# 13. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô (MONITORING FUNCTIONS) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
# ========================================================================
def monitor_position(current_market_price: float):
    global current_position_details, last_ema_position_status, monthly_stats, last_trade_closed_time
    global waiting_for_cooldown
    global last_manual_tp_alert_time
    global must_wait_new_cross
    
    logger.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô (Current Price: {current_market_price:,.2f})")
    pos_info_from_exchange = get_current_position()
    
    # A. ‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ô exchange ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if pos_info_from_exchange and current_position_details:
        current_position_details.update({
            'entry_price': pos_info_from_exchange['entry_price'],
            'contracts': pos_info_from_exchange['contracts'],
            'side': pos_info_from_exchange['side'],
            'unrealized_pnl': pos_info_from_exchange['unrealized_pnl'],
            'liquidation_price': pos_info_from_exchange['liquidation_price']
        })
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        side = current_position_details['side']
        entry_price = current_position_details['entry_price']
        contracts = current_position_details['contracts']
        sl_step = current_position_details.get('sl_step', 0)
        sl_price = current_position_details.get('sl_price')
        
        logger.info(f"{side.upper()} | Entry: {entry_price:.2f} | Price: {current_market_price:.2f} | PnL: {current_position_details['unrealized_pnl']:.2f}")
        
        # ‡∏ï‡∏±‡πâ‡∏á SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        if sl_price is None:
            sl = entry_price - SL_DISTANCE_POINTS if side == 'long' else entry_price + SL_DISTANCE_POINTS
            current_position_details['sl_price'] = sl
            current_position_details['initial_sl_price'] = sl
            current_position_details['sl_step'] = 0
            current_position_details['tp_price'] = 0
            
            logger.info(f"‡∏ï‡∏±‡πâ‡∏á SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‚Üí SL: {sl:.2f} (‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á TP)")
            success = set_sl_only_for_position(side, contracts, sl)
            if not success:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ")
                return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≥‡πÑ‡∏£
        pnl_points = (current_market_price - entry_price) if side == 'long' else (entry_price - current_market_price)
        
        # Step trigger
        trail_trigger_1 = TRAIL_SL_STEP1_TRIGGER_LONG_POINTS if side == 'long' else TRAIL_SL_STEP1_TRIGGER_SHORT_POINTS
        trail_trigger_2 = TRAIL_SL_STEP2_TRIGGER_LONG_POINTS if side == 'long' else TRAIL_SL_STEP2_TRIGGER_SHORT_POINTS
        trail_trigger_3 = TRAIL_SL_STEP3_TRIGGER_LONG_POINTS if side == 'long' else TRAIL_SL_STEP3_TRIGGER_SHORT_POINTS
        
        # SL ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞ step
        trail_sl_1 = entry_price + TRAIL_SL_STEP1_NEW_SL_POINTS_LONG if side == 'long' else entry_price + TRAIL_SL_STEP1_NEW_SL_POINTS_SHORT
        trail_sl_2 = entry_price + TRAIL_SL_STEP2_NEW_SL_POINTS_LONG if side == 'long' else entry_price + TRAIL_SL_STEP2_NEW_SL_POINTS_SHORT
        trail_sl_3 = entry_price + TRAIL_SL_STEP3_NEW_SL_POINTS_LONG if side == 'long' else entry_price + TRAIL_SL_STEP3_NEW_SL_POINTS_SHORT
        
        # SL Step 1
        if sl_step == 0 and pnl_points >= trail_trigger_1:
            current_position_details['sl_step'] = 1
            current_position_details['sl_price'] = trail_sl_1
            logger.info(f"üöÄ SL Step 1 triggered ‚Üí ‡∏¢‡πâ‡∏≤‡∏¢ SL ‡∏à‡∏≤‡∏Å {sl_price:.2f} ‡πÄ‡∏õ‡πá‡∏ô {trail_sl_1:.2f}")
            success = set_sl_only_for_position(side, contracts, trail_sl_1)
            if not success:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï SL Step 1 ‡πÑ‡∏î‡πâ")
        # üÜï Step 2 (Breakeven/‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)
        elif sl_step == 1 and pnl_points >= trail_trigger_2:
            current_position_details['sl_step'] = 2
            current_position_details['sl_price'] = trail_sl_2
            logger.info(f"üü∞ SL Step 2 (BE) ‚Üí ‡∏ï‡∏±‡πâ‡∏á SL ‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà {trail_sl_2:.2f}")
            success = set_sl_only_for_position(side, contracts, trail_sl_2)
            if not success:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï SL Step 2 (BE) ‡πÑ‡∏î‡πâ")
        
        # SL Step 3 (TP ‡∏à‡∏≥‡∏•‡∏≠‡∏á) ‡πÅ‡∏ó‡∏ô Step 2
        elif sl_step == 2 and pnl_points >= trail_trigger_3:
            current_position_details['sl_step'] = 3
            trail_sl_3 = round_to_precision(trail_sl_3, 'price')
            current_position_details['sl_price'] = trail_sl_3
            logger.info(f"üéØ SL Step 3 (TP ‡∏à‡∏≥‡∏•‡∏≠‡∏á) triggered ‚Üí ‡∏ï‡∏±‡πâ‡∏á SL ‡∏ó‡∏µ‡πà {trail_sl_3:.2f}")
            success = set_sl_only_for_position(side, contracts, trail_sl_3)
            if not success:
                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï SL Step 3 (TP ‡∏à‡∏≥‡∏•‡∏≠‡∏á) ‡πÑ‡∏î‡πâ")
        
        # Manual TP Alert
        elif sl_step == 3 and pnl_points > MANUAL_TP_ALERT_THRESHOLD:
            current_time = datetime.now()
            time_since_last_alert = (current_time - last_manual_tp_alert_time).total_seconds()
            if time_since_last_alert >= MANUAL_TP_ALERT_INTERVAL:
                last_manual_tp_alert_time = current_time
                logger.info(f"üîî Manual TP Alert: ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏Å‡∏¥‡∏ô {MANUAL_TP_ALERT_THRESHOLD} points ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                send_telegram(
                    f"üîî <b>Manual TP Alert!</b>\n"
                    f"üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <b>{pnl_points:+,.0f} points</b>\n"
                    f"üìà Entry: {entry_price:,.2f} ‚Üí Current: {current_market_price:,.2f}\n"
                    f"üí° <b>‡∏Å‡∏≥‡πÑ‡∏£‡∏ó‡∏∞‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡πÅ‡∏•‡πâ‡∏ßü©≤ ‡∏£‡∏µ‡∏ö‡∏Å‡∏î cancel all ‡∏î‡πà‡∏ß‡∏ô‡πÜüî•</b>"
                )
        
        return
    
    # B. ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô "‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å exchange" ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÉ‡∏ô‡∏ö‡∏≠‡∏ó
    elif not pos_info_from_exchange and current_position_details:
        logger.warning(f"‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å Exchange ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏à‡∏≥‡∏≠‡∏¢‡∏π‡πà: {current_position_details}")
        
        entry = current_position_details.get('entry_price')
        contracts = current_position_details.get('contracts')
        side = current_position_details.get('side')
        sl_step = current_position_details.get('sl_step', 0)
        
        if not entry or not contracts or not side:
            logger.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current_position_details ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL")
            current_position_details = None
            # *** ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA status ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ***
            last_ema_position_status = None
            must_wait_new_cross = True
            logger.info("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA status ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô - ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
            save_monthly_stats()
            return
        
        closed_price = current_market_price
        pnl = (closed_price - entry) * contracts if side == 'long' else (entry - closed_price) * contracts
        reason = "TP" if sl_step in (2, 3) else "SL"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        add_trade_result(reason, pnl)
        
        # ‡πÄ‡∏ä‡πá‡∏Å‡∏ã‡πâ‡∏≥‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏´‡∏°
        time.sleep(1)
        confirm_pos = get_current_position()
        if confirm_pos:
            logger.warning("‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏•‡∏±‡∏á close ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
            current_position_details = {
                'symbol': confirm_pos['symbol'],
                'side': confirm_pos['side'],
                'contracts': confirm_pos['contracts'],
                'entry_price': confirm_pos['entry_price'],
                'unrealized_pnl': confirm_pos['unrealized_pnl'],
                'liquidation_price': confirm_pos['liquidation_price'],
                'sl_step': current_position_details.get('sl_step', 0),
                'sl_price': current_position_details.get('sl_price'),
                'tp_price': current_position_details.get('tp_price'),
                'initial_sl_price': current_position_details.get('initial_sl_price')
            }
            return
        
        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TP/SL ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        try:
            cancel_all_open_tp_sl_orders()
            logger.info("‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TP/SL ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô")
        except Exception as e:
            logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á TP/SL: {e}")
        
        current_position_details = None
        last_trade_closed_time = datetime.now()
        waiting_for_cooldown = True
        
        # *** ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA status ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ***
        last_ema_position_status = None
        logger.info("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA status ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô - ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        
        save_monthly_stats()
        logger.info(f"‡πÄ‡∏£‡∏¥‡πà‡∏° COOLDOWN PERIOD: {TRADE_COOLDOWN_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏ä‡πà‡∏ô market/limit ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á)
        try:
            time.sleep(1)
            exchange.cancel_all_orders(SYMBOL)
            logger.info("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            logger.warning(f"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô: {e}")
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        send_telegram(
            f"üìä ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {side.upper()} ‡πÅ‡∏•‡πâ‡∏ß!\n"
            f"üí∞ P&L: <b>{pnl:+,.2f} USDT</b>\n"
            f"üìà Entry: <code>{entry:,.2f}</code> ‚Üí Exit: <code>{closed_price:,.2f}</code>\n"
            f"üåà ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: <b>{reason}</b>\n"
            #f"üîÑ ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà\n"
            f"‚è≥ Cooldown: <b>{TRADE_COOLDOWN_SECONDS // 60} ‡∏ô‡∏≤‡∏ó‡∏µ</b>"
        )
        
        return
    
    # C. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô exchange ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô bot
    else:
        if current_position_details:
            logger.warning("‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà exchange ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï")
            try:
                exchange.cancel_all_orders(SYMBOL)
            except Exception as e:
                logger.warning(f"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            current_position_details = None
            # *** ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA status ***
            last_ema_position_status = None
            must_wait_new_cross = True  
            logger.info("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï EMA status - ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
            save_monthly_stats()
        else:
            logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
            
# ========================================================================
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ round precision
# ========================================================================

def round_to_precision(value: float, precision_type: str) -> float:
    """‡∏õ‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏° Precision ‡∏ó‡∏µ‡πà Exchange ‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    if market_info and 'precision' in market_info and precision_type in market_info['precision']:
        return float(exchange.decimal_to_precision(value, ccxt.ROUND, market_info['precision'][precision_type]))
    else:
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Precision ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{precision_type}'. ‡πÉ‡∏ä‡πâ round() ‡∏õ‡∏Å‡∏ï‡∏¥.")
        return round(value, 2)

# ==============================================================================
# 14. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (MONTHLY REPORT FUNCTIONS)
# ==============================================================================
def monthly_report():
    global last_monthly_report_date, monthly_stats, initial_balance

    now = datetime.now()
    current_month_year = now.strftime('%Y-%m')

    if last_monthly_report_date and \
       last_monthly_report_date.year == now.year and \
       last_monthly_report_date.month == now.month:
        logger.debug(f"‚ÑπÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {current_month_year} ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß.")
        return

    report_day_of_month = min(MONTHLY_REPORT_DAY, calendar.monthrange(now.year, now.month)[1])
    if not (now.day == report_day_of_month and now.hour == MONTHLY_REPORT_HOUR and now.minute == MONTHLY_REPORT_MINUTE):
        logger.debug(f"‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ({report_day_of_month} {MONTHLY_REPORT_HOUR:02d}:{MONTHLY_REPORT_MINUTE:02d}).")
        return

    try:
        balance = get_portfolio_balance()

        if monthly_stats['month_year'] != current_month_year:
            logger.info(f"üÜï ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ({monthly_stats['month_year']} vs {current_month_year}). ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà.")
            reset_monthly_stats()

        tp_count = monthly_stats['tp_count']
        sl_count = monthly_stats['sl_count']
        total_pnl = monthly_stats['total_pnl']
        pnl_from_start = balance - initial_balance if initial_balance > 0 else 0.0

        message = f"""üìä <b>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - {now.strftime('%B %Y')}</b>
<b>üîπ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:</b> <code>{total_pnl:+,.2f} USDT</code>
<b>üîπ SL:</b> <code>{sl_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>
<b>üîπ TP:</b> <code>{tp_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</code>
<b>üîπ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</b> <code>{balance:,.2f} USDT</code>
<b>üîπ ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</b> <code>{pnl_from_start:+,.2f} USDT</code>
<b>‚è± ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</b> ‚úÖ
<b>‡πÄ‡∏ß‡∏•‡∏≤:</b> <code>{now.strftime('%H:%M')}</code>"""

        send_telegram(message)
        last_monthly_report_date = now.date()
        monthly_stats['last_report_month_year'] = current_month_year
        save_monthly_stats()
        logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß.")

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {e}", exc_info=True)
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")

def monthly_report_scheduler():
    global last_monthly_report_date

    logger.info("‚è∞ ‡πÄ‡∏£‡∏¥‡πà‡∏° Monthly Report Scheduler.")
    while True:
        now = datetime.now()

        report_day = min(MONTHLY_REPORT_DAY, calendar.monthrange(now.year, now.month)[1])
        next_report_time_this_month = now.replace(day=report_day, hour=MONTHLY_REPORT_HOUR, minute=MONTHLY_REPORT_MINUTE, second=0, microsecond=0)

        if now >= next_report_time_this_month and \
           (last_monthly_report_date is None or \
            last_monthly_report_date.year != now.year or \
            last_monthly_report_date.month != now.month):
            logger.info(f"‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ({now.strftime('%H:%M')}) ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...")
            monthly_report()

        if now >= next_report_time_this_month:
            next_month = now.month + 1
            next_year = now.year
            if next_month > 12:
                next_month = 1
                next_year += 1
            max_day_in_next_month = calendar.monthrange(next_year, next_month)[1]
            report_day_for_next_month = min(MONTHLY_REPORT_DAY, max_day_in_next_month)
            next_report_time = datetime(next_year, next_month, report_day_for_next_month, MONTHLY_REPORT_HOUR, MONTHLY_REPORT_MINUTE, 0, 0)
        else:
            next_report_time = next_report_time_this_month

        time_to_wait = (next_report_time - datetime.now()).total_seconds()
        if time_to_wait > 0:
            logger.info(f"‚è∞ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {int(time_to_wait / 86400)} ‡∏ß‡∏±‡∏ô {int((time_to_wait % 86400) / 3600)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {int((time_to_wait % 3600) / 60)} ‡∏ô‡∏≤‡∏ó‡∏µ.")
            time.sleep(max(time_to_wait, 60))
        else:
            time.sleep(60)

# =================================================================
# 15. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó (BOT STARTUP FUNCTIONS)
# =================================================================
def send_startup_message():
    global initial_balance
    try:
        initial_balance = get_portfolio_balance()
        startup_time = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        message = f"""ü§ñ <b>‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</b> üí∞
üí∞ <b>‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</b> <code>{initial_balance:,.2f} USDT</code>
üìä <b>TF:</b> <code>{TIMEFRAME}</code> | <b>Leverage:</b> <code>{LEVERAGE}x</code>
üìà ‚Ä¢ <b>EMA Fast:</b> <code>{EMA_FAST_PERIOD}</code>
üìâ ‚Ä¢ <b>EMA Slow:</b> <code>{EMA_SLOW_PERIOD}</code>
‚ùé <b>SL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</b> <code>{SL_DISTANCE_POINTS} points</code>
üöÄ ‚Ä¢ <b>Step 1:</b> <code>{TRAIL_SL_STEP1_TRIGGER_LONG_POINTS}pts</code> ‚Üí SL <code>{TRAIL_SL_STEP1_NEW_SL_POINTS_LONG:+}pts</code>
üî• ‚Ä¢ <b>Step 2:(TP1)</b> <code>{TRAIL_SL_STEP2_TRIGGER_LONG_POINTS}pts</code> ‚Üí SL <code>{TRAIL_SL_STEP2_NEW_SL_POINTS_LONG:+}pts</code>
üéâ ‚Ä¢ <b>Step 3 (TP2):</b> <code>{TRAIL_SL_STEP3_TRIGGER_LONG_POINTS}pts</code> ‚Üí SL <code>{TRAIL_SL_STEP3_NEW_SL_POINTS_LONG}pts</code> 
‚è∞ <b>Manual TP Alert:</b> <code>{MANUAL_TP_ALERT_THRESHOLD} points</code> (‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏≥‡πÑ‡∏£ü§ë)
üîç <b>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå...</b>"""

        send_telegram(message)
        logger.info("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô.")
        
    except Exception as e:
        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {e}", exc_info=True)

# =================================================================
# 16. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (MAIN BOT LOGIC)
# =================================================================
def main():
    global must_wait_new_cross, last_cross_bar_time, last_entry_cross_bar_time
    global current_position_details, last_ema_position_status, last_ema_calc_time, last_trade_closed_time
    global waiting_for_cooldown
    
    try:
        setup_exchange()
        load_monthly_stats()
        send_startup_message()
        
        monthly_thread = threading.Thread(target=monthly_report_scheduler, daemon=True)
        monthly_thread.start()
        logger.info("Monthly Report Scheduler Thread Started.")
        
    except Exception as e:
        error_msg = f"Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô {ERROR_RETRY_SLEEP_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ."
        send_telegram(error_msg)
        logger.critical(f"Startup error: {e}", exc_info=True)
        time.sleep(ERROR_RETRY_SLEEP_SECONDS)
        sys.exit(1)
    
    logger.info("‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Main Loop ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
    force_open_initial_order = False  # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô True ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ/False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâema ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    
    last_ema_calc_time = datetime.min  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA Calculation
    last_trade_closed_time = datetime.min  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cooldown
    
    while True:
        try:
            current_time = datetime.now()
            logger.info(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö Main Loop ({current_time.strftime('%Y-%m-%d %H:%M:%S')}) - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö.")
            
            # --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COOLDOWN ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏•‡∏±‡∏Å) ---
            if last_trade_closed_time != datetime.min:
                seconds_since_close = (current_time - last_trade_closed_time).total_seconds()
                if seconds_since_close < TRADE_COOLDOWN_SECONDS:
                    time_left = TRADE_COOLDOWN_SECONDS - seconds_since_close
                    logger.info(f"üö´ COOLDOWN ACTIVE: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {time_left:.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({time_left/60:.1f} ‡∏ô‡∏≤‡∏ó‡∏µ)")
                    time.sleep(FAST_LOOP_INTERVAL_SECONDS)
                    continue
                else:
                    # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cooldown period
                    if waiting_for_cooldown:
                        waiting_for_cooldown = False
                        logger.info("‚úÖ COOLDOWN PERIOD ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î - ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà")
                        #send_telegram("‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ä‡πà‡∏ß‡∏á Cooldown - ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà")
            
            # --- 2. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ---
            current_price = None
            try:
                logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Ticker)...")
                ticker = exchange.fetch_ticker(SYMBOL)
                time.sleep(0.2)  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 0.5 ‡πÄ‡∏õ‡πá‡∏ô 0.2
            except Exception as e:
                logger.warning(f"Error fetching ticker: {e}. Retrying in {ERROR_RETRY_SLEEP_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                send_telegram(f"üö® API Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ. ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e.args[0] if e.args else str(e)}")
                time.sleep(ERROR_RETRY_SLEEP_SECONDS)
                continue
            
            if not ticker or 'last' not in ticker:
                logger.error("Failed to fetch valid ticker. Skipping loop and retrying.")
                send_telegram("‚ùå Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á. Skipping.")
                time.sleep(ERROR_RETRY_SLEEP_SECONDS)
                continue
            
            current_price = float(ticker['last'])
            logger.info(f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á {SYMBOL}: {current_price:,.2f}")
            
            # --- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (TP/SL, Trailing SL) ---
            monitor_position(current_price)
            
            # --- 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cooldown) ---
            if current_position_details is None and not waiting_for_cooldown:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡πÉ‡∏à (Double-check mechanism)
                if last_trade_closed_time != datetime.min:
                    seconds_since_close = (current_time - last_trade_closed_time).total_seconds()
                    if seconds_since_close < TRADE_COOLDOWN_SECONDS:
                        logger.info(f"üö´ Double-check: ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cooldown ({TRADE_COOLDOWN_SECONDS - seconds_since_close:.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
                        time.sleep(FAST_LOOP_INTERVAL_SECONDS)
                        continue
                
                # Force open mode (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
                if force_open_initial_order:
                    logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å.")
                    send_telegram("üß™ <b>‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</b> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö TP/SL.")
                    market_order_success, confirmed_entry_price = open_market_order('long', current_price)
                    if market_order_success and confirmed_entry_price:
                        logger.info(f"‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à. ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏• TP/SL ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ.")
                        force_open_initial_order = False
                    else:
                        logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î Long ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log.")
                
                # ‡πÇ‡∏´‡∏°‡∏î EMA Cross ‡∏õ‡∏Å‡∏ï‡∏¥
                else:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                    if (current_time - last_ema_calc_time).total_seconds() >= EMA_CALC_INTERVAL_SECONDS:
                        logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà. ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô...")
                        if must_wait_new_cross:
                            _ = check_ema_cross()  # Priming
                            must_wait_new_cross = False
                            time.sleep(FAST_LOOP_INTERVAL_SECONDS)
                            continue
                        signal = check_ema_cross()
                        last_ema_calc_time = current_time  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        
                        if signal:
                            logger.info(f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross: {signal.upper()}. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå.")
                            send_telegram(f"üéØ <b>SIGNAL:</b> ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross: <b>{signal.upper()}</b>")
                            
                            market_order_success, confirmed_entry_price = open_market_order(signal, current_price)
                            if market_order_success and confirmed_entry_price:
                                logger.info(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {signal.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à. ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏• TP/SL ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ.")
                                # üÜï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ cross ‡πÅ‡∏ó‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                                global last_entry_cross_bar_time, last_cross_bar_time
                                last_entry_cross_bar_time = last_cross_bar_time
        
                            else:
                                logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î Market Order {signal.upper()} ‡πÑ‡∏î‡πâ.")
                        else:
                            logger.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ.")
                    else:
                        time_until_next_ema = EMA_CALC_INTERVAL_SECONDS - (current_time - last_ema_calc_time).total_seconds()
                        logger.info(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà. ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA Cross ‡∏≠‡∏µ‡∏Å {time_until_next_ema:,.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ.")
            
            elif current_position_details is not None:  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                logger.info(f"Current Position: {current_position_details['side'].upper()}, SL Step: {current_position_details['sl_step']}. ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°.")
            
            elif waiting_for_cooldown:  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cooldown period
                seconds_left = TRADE_COOLDOWN_SECONDS - (current_time - last_trade_closed_time).total_seconds()
                logger.info(f"‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á Cooldown - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å {seconds_left:.0f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            # --- 5. ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö Main Loop (‡∏•‡∏π‡∏õ‡πÄ‡∏£‡πá‡∏ß) ---
            logger.info(f"‡∏à‡∏ö‡∏£‡∏≠‡∏ö Main Loop. ‡∏£‡∏≠ {FAST_LOOP_INTERVAL_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ.")
            time.sleep(FAST_LOOP_INTERVAL_SECONDS)
            
        except KeyboardInterrupt:
            logger.info("‡∏ö‡∏≠‡∏ó‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (KeyboardInterrupt).")
            send_telegram("üõë Bot ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ.")
            break
        except (ccxt.NetworkError, ccxt.ExchangeError) as e:
            error_msg = f"üö® API Error ‡πÉ‡∏ô Main Loop\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô {ERROR_RETRY_SLEEP_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ."
            logger.error(error_msg, exc_info=True)
            send_telegram(error_msg)
            time.sleep(ERROR_RETRY_SLEEP_SECONDS)
        except Exception as e:
            error_msg = f"‚ùå Error: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô Main Loop\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô {ERROR_RETRY_SLEEP_SECONDS} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ."
            logger.error(error_msg, exc_info=True)
            send_telegram(error_msg)
            time.sleep(ERROR_RETRY_SLEEP_SECONDS)

# =================================================================
# 17. ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (ENTRY POINT)
# =================================================================
if __name__ == '__main__':
    main()


